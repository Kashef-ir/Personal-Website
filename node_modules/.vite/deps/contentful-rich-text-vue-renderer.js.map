{
  "version": 3,
  "sources": ["../../@contentful/rich-text-types/src/blocks.ts", "../../@contentful/rich-text-types/src/inlines.ts", "../../@contentful/rich-text-types/src/marks.ts", "../../@contentful/rich-text-types/src/schemaConstraints.ts", "../../@contentful/rich-text-types/dist/types.js", "../../@contentful/rich-text-types/dist/nodeTypes.js", "../../@contentful/rich-text-types/src/emptyDocument.ts", "../../@contentful/rich-text-types/src/helpers.ts", "../../@contentful/rich-text-types/src/schemas/index.ts", "../../@contentful/rich-text-types/src/index.ts", "../../contentful-rich-text-vue-renderer/dist/index.esm.js"],
  "sourcesContent": ["/**\n * Map of all Contentful block types. Blocks contain inline or block nodes.\n */\nexport enum BLOCKS {\n  DOCUMENT = 'document',\n  PARAGRAPH = 'paragraph',\n\n  HEADING_1 = 'heading-1',\n  HEADING_2 = 'heading-2',\n  HEADING_3 = 'heading-3',\n  HEADING_4 = 'heading-4',\n  HEADING_5 = 'heading-5',\n  HEADING_6 = 'heading-6',\n\n  OL_LIST = 'ordered-list',\n  UL_LIST = 'unordered-list',\n  LIST_ITEM = 'list-item',\n\n  HR = 'hr',\n  QUOTE = 'blockquote',\n\n  EMBEDDED_ENTRY = 'embedded-entry-block',\n  EMBEDDED_ASSET = 'embedded-asset-block',\n  EMBEDDED_RESOURCE = 'embedded-resource-block',\n\n  TABLE = 'table',\n  TABLE_ROW = 'table-row',\n  TABLE_CELL = 'table-cell',\n  TABLE_HEADER_CELL = 'table-header-cell',\n}\n", "/**\n * Map of all Contentful inline types. Inline contain inline or text nodes.\n *\n * @note This should be kept in alphabetical order since the\n * [validation package](https://github.com/contentful/content-stack/tree/master/packages/validation)\n *  relies on the values being in a predictable order.\n */\nexport enum INLINES {\n  ASSET_HYPERLINK = 'asset-hyperlink',\n  EMBEDDED_ENTRY = 'embedded-entry-inline',\n  EMBEDDED_RESOURCE = 'embedded-resource-inline',\n  ENTRY_HYPERLINK = 'entry-hyperlink',\n  HYPERLINK = 'hyperlink',\n  RESOURCE_HYPERLINK = 'resource-hyperlink',\n}\n", "/**\n * Map of all Contentful marks.\n */\nexport enum MARKS {\n  BOLD = 'bold',\n  ITALIC = 'italic',\n  UNDERLINE = 'underline',\n  CODE = 'code',\n  SUPERSCRIPT = 'superscript',\n  SUBSCRIPT = 'subscript',\n  STRIKETHROUGH = 'strikethrough',\n}\n", "import { BLOCKS } from './blocks';\nimport { INLINES } from './inlines';\nimport { MARKS } from './marks';\n\nexport type TopLevelBlockEnum =\n  | BLOCKS.PARAGRAPH\n  | BLOCKS.HEADING_1\n  | BLOCKS.HEADING_2\n  | BLOCKS.HEADING_3\n  | BLOCKS.HEADING_4\n  | BLOCKS.HEADING_5\n  | BLOCKS.HEADING_6\n  | BLOCKS.OL_LIST\n  | BLOCKS.UL_LIST\n  | BLOCKS.HR\n  | BLOCKS.QUOTE\n  | BLOCKS.EMBEDDED_ENTRY\n  | BLOCKS.EMBEDDED_ASSET\n  | BLOCKS.EMBEDDED_RESOURCE\n  | BLOCKS.TABLE;\n\n/**\n * Array of all top level block types.\n * Only these block types can be the direct children of the document.\n */\nexport const TOP_LEVEL_BLOCKS: TopLevelBlockEnum[] = [\n  BLOCKS.PARAGRAPH,\n  BLOCKS.HEADING_1,\n  BLOCKS.HEADING_2,\n  BLOCKS.HEADING_3,\n  BLOCKS.HEADING_4,\n  BLOCKS.HEADING_5,\n  BLOCKS.HEADING_6,\n  BLOCKS.OL_LIST,\n  BLOCKS.UL_LIST,\n  BLOCKS.HR,\n  BLOCKS.QUOTE,\n  BLOCKS.EMBEDDED_ENTRY,\n  BLOCKS.EMBEDDED_ASSET,\n  BLOCKS.EMBEDDED_RESOURCE,\n  BLOCKS.TABLE,\n];\n\nexport type ListItemBlockEnum =\n  | BLOCKS.PARAGRAPH\n  | BLOCKS.HEADING_1\n  | BLOCKS.HEADING_2\n  | BLOCKS.HEADING_3\n  | BLOCKS.HEADING_4\n  | BLOCKS.HEADING_5\n  | BLOCKS.HEADING_6\n  | BLOCKS.OL_LIST\n  | BLOCKS.UL_LIST\n  | BLOCKS.HR\n  | BLOCKS.QUOTE\n  | BLOCKS.EMBEDDED_ENTRY\n  | BLOCKS.EMBEDDED_ASSET\n  | BLOCKS.EMBEDDED_RESOURCE;\n\n/**\n * Array of all allowed block types inside list items\n */\nexport const LIST_ITEM_BLOCKS: TopLevelBlockEnum[] = [\n  BLOCKS.PARAGRAPH,\n  BLOCKS.HEADING_1,\n  BLOCKS.HEADING_2,\n  BLOCKS.HEADING_3,\n  BLOCKS.HEADING_4,\n  BLOCKS.HEADING_5,\n  BLOCKS.HEADING_6,\n  BLOCKS.OL_LIST,\n  BLOCKS.UL_LIST,\n  BLOCKS.HR,\n  BLOCKS.QUOTE,\n  BLOCKS.EMBEDDED_ENTRY,\n  BLOCKS.EMBEDDED_ASSET,\n  BLOCKS.EMBEDDED_RESOURCE,\n];\n\nexport const TABLE_BLOCKS = [\n  BLOCKS.TABLE,\n  BLOCKS.TABLE_ROW,\n  BLOCKS.TABLE_CELL,\n  BLOCKS.TABLE_HEADER_CELL,\n];\n\n/**\n * Array of all void block types\n */\nexport const VOID_BLOCKS = [\n  BLOCKS.HR,\n  BLOCKS.EMBEDDED_ENTRY,\n  BLOCKS.EMBEDDED_ASSET,\n  BLOCKS.EMBEDDED_RESOURCE,\n];\n\n/**\n * Dictionary of all container block types, and the set block types they accept as children.\n *\n * Note: This does not include `[BLOCKS.DOCUMENT]: TOP_LEVEL_BLOCKS`\n */\nexport const CONTAINERS = {\n  [BLOCKS.OL_LIST]: [BLOCKS.LIST_ITEM],\n  [BLOCKS.UL_LIST]: [BLOCKS.LIST_ITEM],\n  [BLOCKS.LIST_ITEM]: LIST_ITEM_BLOCKS,\n  [BLOCKS.QUOTE]: [BLOCKS.PARAGRAPH],\n  [BLOCKS.TABLE]: [BLOCKS.TABLE_ROW],\n  [BLOCKS.TABLE_ROW]: [BLOCKS.TABLE_CELL, BLOCKS.TABLE_HEADER_CELL],\n  [BLOCKS.TABLE_CELL]: [BLOCKS.PARAGRAPH, BLOCKS.UL_LIST, BLOCKS.OL_LIST],\n  [BLOCKS.TABLE_HEADER_CELL]: [BLOCKS.PARAGRAPH],\n};\n\n/**\n * Array of all heading levels\n */\nexport const HEADINGS = [\n  BLOCKS.HEADING_1,\n  BLOCKS.HEADING_2,\n  BLOCKS.HEADING_3,\n  BLOCKS.HEADING_4,\n  BLOCKS.HEADING_5,\n  BLOCKS.HEADING_6,\n];\n\n/**\n * Array of all block types that may contain text and inline nodes.\n */\nexport const TEXT_CONTAINERS = [BLOCKS.PARAGRAPH, ...HEADINGS];\n\n/**\n * Node types before `tables` release.\n */\nexport const V1_NODE_TYPES = [\n  BLOCKS.DOCUMENT,\n  BLOCKS.PARAGRAPH,\n  BLOCKS.HEADING_1,\n  BLOCKS.HEADING_2,\n  BLOCKS.HEADING_3,\n  BLOCKS.HEADING_4,\n  BLOCKS.HEADING_5,\n  BLOCKS.HEADING_6,\n  BLOCKS.OL_LIST,\n  BLOCKS.UL_LIST,\n  BLOCKS.LIST_ITEM,\n  BLOCKS.HR,\n  BLOCKS.QUOTE,\n  BLOCKS.EMBEDDED_ENTRY,\n  BLOCKS.EMBEDDED_ASSET,\n  INLINES.HYPERLINK,\n  INLINES.ENTRY_HYPERLINK,\n  INLINES.ASSET_HYPERLINK,\n  INLINES.EMBEDDED_ENTRY,\n  'text',\n];\n\n/**\n * Marks before `superscript` & `subscript` release.\n */\nexport const V1_MARKS = [MARKS.BOLD, MARKS.CODE, MARKS.ITALIC, MARKS.UNDERLINE];\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=types.js.map", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=nodeTypes.js.map", "import { BLOCKS } from './blocks';\nimport { Document } from './types';\n\n/**\n * A rich text document considered to be empty.\n * Any other document structure than this is not considered empty.\n */\nexport const EMPTY_DOCUMENT: Document = {\n  nodeType: BLOCKS.DOCUMENT,\n  data: {},\n  content: [\n    {\n      nodeType: BLOCKS.PARAGRAPH,\n      data: {},\n      content: [\n        {\n          nodeType: 'text',\n          value: '',\n          marks: [],\n          data: {},\n        },\n      ],\n    },\n  ],\n};\n", "import { BLOCKS } from './blocks';\nimport { INLINES } from './inlines';\nimport { Block, Inline, Node, Text } from './types';\n\n/**\n * Tiny replacement for Object.values(object).includes(key) to\n * avoid including CoreJS polyfills\n */\nfunction hasValue(obj: Record<string, unknown>, value: unknown) {\n  for (const key of Object.keys(obj)) {\n    if (value === obj[key]) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Checks if the node is an instance of Inline.\n */\nexport function isInline(node: Node): node is Inline {\n  return hasValue(INLINES, node.nodeType);\n}\n\n/**\n * Checks if the node is an instance of Block.\n */\nexport function isBlock(node: Node): node is Block {\n  return hasValue(BLOCKS, node.nodeType);\n}\n\n/**\n * Checks if the node is an instance of Text.\n */\nexport function isText(node: Node): node is Text {\n  return node.nodeType === 'text';\n}\n", "export declare type PrimitiveType = number | boolean | string | null;\nexport declare type Definition = {\n  $ref?: string;\n  $schema?: string;\n  $id?: string;\n  description?: string;\n  allOf?: Definition[];\n  oneOf?: Definition[];\n  anyOf?: Definition[];\n  title?: string;\n  type?: string | string[];\n  definitions?: {\n    [key: string]: any;\n  };\n  format?: string;\n  items?: Definition | Definition[];\n  minItems?: number;\n  additionalItems?:\n    | {\n        anyOf: Definition[];\n      }\n    | Definition;\n  enum?: PrimitiveType[] | Definition[];\n  default?: PrimitiveType | Record<string, any>;\n  additionalProperties?: Definition | boolean;\n  required?: string[];\n  propertyOrder?: string[];\n  properties?: {\n    [key: string]: any;\n  };\n  defaultProperties?: string[];\n  patternProperties?: {\n    [pattern: string]: Definition;\n  };\n  typeof?: 'function';\n};\n\nexport function getSchemaWithNodeType(nodeType: string): Definition {\n  try {\n    return require(`./generated/${nodeType}.json`);\n  } catch (error) {\n    throw new Error(`Schema for nodeType \"${nodeType}\" was not found.`);\n  }\n}\n", "export { BLOCKS } from './blocks';\nexport { INLINES } from './inlines';\nexport { MARKS } from './marks';\n\nexport * from './schemaConstraints';\n\nexport * from './types';\nexport * from './nodeTypes';\n\nexport { EMPTY_DOCUMENT } from './emptyDocument';\n\nimport * as helpers from './helpers';\nexport { helpers };\n\nexport { getSchemaWithNodeType } from './schemas';\n", "import { MARKS, BLOCKS, INLINES, helpers } from '@contentful/rich-text-types';\nimport { h } from 'vue';\n\nconst defaultInline = (type, node, key) => {\n  return h(\n    \"span\",\n    {\n      key,\n      style: {\n        margin: \"0px 5px\",\n        padding: \"0 .25rem 0 .75rem\",\n        border: \"1px solid #d3dce0\",\n        fontFamily: \"monospace\",\n      },\n    },\n    `inline: ${type}, sys.id: ${node.data.target.sys.id}`\n  );\n};\n\nconst defaultMarkRenderers = {\n  [MARKS.BOLD]: (children, key) => h(\"strong\", { key }, children),\n  [MARKS.ITALIC]: (children, key) => h(\"em\", { key }, children),\n  [MARKS.UNDERLINE]: (children, key) => h(\"u\", { key }, children),\n  [MARKS.CODE]: (children, key) => h(\"code\", { key }, children),\n  [MARKS.SUPERSCRIPT]: (children, key) => h(\"sup\", { key }, children),\n  [MARKS.SUBSCRIPT]: (children, key) => h(\"sub\", { key }, children),\n  [MARKS.STRIKETHROUGH]: (children, key) => h(\"s\", { key }, children),\n};\n\nconst defaultNodeRenderers = {\n  [BLOCKS.PARAGRAPH]: (node, key, next) =>\n    h(\"p\", { key }, next(node.content, key, next)),\n  [BLOCKS.HEADING_1]: (node, key, next) =>\n    h(\"h1\", { key }, next(node.content, key, next)),\n  [BLOCKS.HEADING_2]: (node, key, next) =>\n    h(\"h2\", { key }, next(node.content, key, next)),\n  [BLOCKS.HEADING_3]: (node, key, next) =>\n    h(\"h3\", { key }, next(node.content, key, next)),\n  [BLOCKS.HEADING_4]: (node, key, next) =>\n    h(\"h4\", { key }, next(node.content, key, next)),\n  [BLOCKS.HEADING_5]: (node, key, next) =>\n    h(\"h5\", { key }, next(node.content, key, next)),\n  [BLOCKS.HEADING_6]: (node, key, next) =>\n    h(\"h6\", { key }, next(node.content, key, next)),\n  [BLOCKS.EMBEDDED_ENTRY]: (node, key, next) =>\n    h(\"div\", { key }, next(node.content, key, next)),\n  [BLOCKS.UL_LIST]: (node, key, next) =>\n    h(\"ul\", { key }, next(node.content, key, next)),\n  [BLOCKS.OL_LIST]: (node, key, next) =>\n    h(\"ol\", { key }, next(node.content, key, next)),\n  [BLOCKS.LIST_ITEM]: (node, key, next) =>\n    h(\"li\", { key }, next(node.content, key, next)),\n  [BLOCKS.QUOTE]: (node, key, next) =>\n    h(\"blockquote\", { key }, next(node.content, key, next)),\n  [BLOCKS.TABLE]: (node, key, next) =>\n    h(\"table\", { key }, next(node.content, key, next)),\n  [BLOCKS.TABLE_ROW]: (node, key, next) =>\n    h(\"tr\", { key }, next(node.content, key, next)),\n  [BLOCKS.TABLE_CELL]: (node, key, next) =>\n    h(\"td\", { key }, next(node.content, key, next)),\n  [BLOCKS.TABLE_HEADER_CELL]: (node, key, next) =>\n    h(\"th\", { key }, next(node.content, key, next)),\n  [BLOCKS.HR]: (_node, key) => h(\"hr\", { key }),\n  [INLINES.ASSET_HYPERLINK]: (node, key) =>\n    defaultInline(INLINES.ASSET_HYPERLINK, node, key),\n  [INLINES.ENTRY_HYPERLINK]: (node, key) =>\n    defaultInline(INLINES.ENTRY_HYPERLINK, node, key),\n  [INLINES.EMBEDDED_ENTRY]: (node, key) =>\n    defaultInline(INLINES.EMBEDDED_ENTRY, node, key),\n  [INLINES.HYPERLINK]: (node, key, next) => {\n    return h(\n      \"a\",\n      {\n        key,\n        href: node.data.uri,\n      },\n      next(node.content, key, next)\n    );\n  },\n  text: ({ marks, value }, key, markRenderer) => {\n    if (!marks.length) {\n      return value;\n    }\n\n    const marksReversed = [...marks].reverse();\n    return marksReversed.reduce(\n      (aggregate, mark, i) =>\n        markRenderer[mark.type]([aggregate], `${key}-${i}`, h),\n      value\n    );\n  },\n};\n\nconst renderNodeList = (nodes, key, renderer) => {\n  return nodes.map((node, i) => renderNode(node, `${key}-${i}`, renderer));\n};\n\nconst renderNode = (node, key, renderer) => {\n  const nodeRenderer = renderer.node;\n\n  if (helpers.isText(node)) {\n    // We're at final tip of node branch, can render text.\n    const markerRender = renderer.mark;\n    return nodeRenderer.text(node, key, markerRender);\n  } else {\n    const nextNode = (nodes) => renderNodeList(nodes, key, renderer);\n    if (!nodeRenderer) {\n      return h(\"div\", { key }, `${key} ;lost nodeRenderer`);\n    }\n    if (!node.nodeType || !nodeRenderer[node.nodeType]) {\n      // TODO: Figure what to return when passed an unrecognized node.\n      return h(\n        \"div\",\n        { key },\n        \"(Unrecognized node type) \" + (node.nodeType || \"empty\")\n      );\n    }\n    return nodeRenderer[node.nodeType](node, key, nextNode);\n  }\n};\n\nconst RichText = ({ nodeRenderers, markRenderers, document }) => {\n  if (!document) {\n    console.warn(\"No document given to RichText renderer\");\n    return [];\n  }\n\n  const renderer = {\n    node: {\n      ...defaultNodeRenderers,\n      ...nodeRenderers,\n    },\n    mark: {\n      ...defaultMarkRenderers,\n      ...markRenderers,\n    },\n  };\n\n  return renderNodeList(document.content, \"RichText-\", renderer);\n};\n\nRichText.props = [\"document\", \"nodeRenderers\", \"markRenderers\"];\n\nexport { RichText as default };\n"],
  "mappings": "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",
  "names": ["BLOCKS", "INLINES", "MARKS", "helpers"]
}
